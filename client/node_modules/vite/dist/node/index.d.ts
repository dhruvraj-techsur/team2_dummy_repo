/// <reference types="node" />

 // ... [rest of the file unchanged]

 export declare class FSWatcher extends EventEmitter implements fs.FSWatcher {
     options: WatchOptions

     /**
      * Constructs a new FSWatcher instance with optional WatchOptions parameter.
      */
     constructor(options?: WatchOptions)

     /**
      * Add files, directories, or glob patterns for tracking. Takes an array of strings or just one
      * string.
      */
     add(paths: string | ReadonlyArray<string>): this

     /**
      * Stop watching files, directories, or glob patterns. Takes an array of strings or just one
      * string.
      */
     unwatch(paths: string | ReadonlyArray<string>): this

     /**
      * Returns an object representing all the paths on the file system being watched by this
      * `FSWatcher` instance. The object's keys are all the directories (using absolute paths unless
      * the `cwd` option was used), and the values are arrays of the names of the items contained in
      * each directory.
      */
     getWatched(): {
         [directory: string]: string[]
     }

     /**
      * Removes all listeners from watched files.
      */
     close(): Promise<void>

     /**
      * Node.js FSWatcher method to keep the process running.
      */
     ref(): this

     /**
      * Node.js FSWatcher method to allow the process to exit if this is the only active watcher.
      */
     unref(): this

     on(
     event: 'add' | 'addDir' | 'change',
     listener: (path: string, stats?: fs.Stats) => void,
     ): this

     on(
     event: 'all',
     listener: (
     eventName: 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir',
     path: string,
     stats?: fs.Stats,
     ) => void,
     ): this

     /**
      * Error occurred
      */
     on(event: 'error', listener: (error: Error) => void): this

     /**
      * Exposes the native Node `fs.FSWatcher events`
      */
     on(
     event: 'raw',
     listener: (eventName: string, path: string, details: any) => void,
     ): this

     /**
      * Fires when the initial scan is complete
      */
     on(event: 'ready', listener: () => void): this

     on(event: 'unlink' | 'unlinkDir', listener: (path: string) => void): this

     on(event: string, listener: (...args: any[]) => void): this
 }
 
 // ... [rest of the file unchanged]